#!/usr/bin/env python3
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from src.config import Config
from src.database import Database
from src.parsers.zakupki_parser import ZakupkiParser
from src.notifiers.telegram_bot import TelegramNotifier
from src.analyzers.document_analyzer import DocumentAnalyzer
from src.generators.proposal_generator import ProposalGenerator
import logging
import time

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def monitor_tenders():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö —Ç–µ–Ω–¥–µ—Ä–æ–≤"""
    logger.info("üîç –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç–µ–Ω–¥–µ—Ä–æ–≤")
    
    config = Config()
    db = Database(config.DB_PATH)
    parser = ZakupkiParser()
    telegram = TelegramNotifier(config.TELEGRAM_TOKEN, config.TELEGRAM_CHAT_ID)
    
    tenders = parser.search(
        keywords=config.SEARCH_KEYWORDS,
        min_price=config.MIN_PRICE,
        max_price=config.MAX_PRICE
    )
    
    logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ —Ç–µ–Ω–¥–µ—Ä–æ–≤: {len(tenders)}")
    
    new_count = 0
    for tender in tenders:
        if db.save_tender(tender):
            new_count += 1
            logger.info(f"‚úÖ –ù–æ–≤—ã–π —Ç–µ–Ω–¥–µ—Ä: {tender['tender_id']}")
            telegram.notify_new_tender(tender)
            time.sleep(1)
    
    logger.info(f"üíæ –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö —Ç–µ–Ω–¥–µ—Ä–æ–≤: {new_count}")

def analyze_documents():
    """–ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–æ–≤—ã—Ö —Ç–µ–Ω–¥–µ—Ä–æ–≤"""
    logger.info("üìÑ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    
    config = Config()
    db = Database(config.DB_PATH)
    analyzer = DocumentAnalyzer()
    
    new_tenders = db.get_new_tenders()
    logger.info(f"üìä –¢–µ–Ω–¥–µ—Ä–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {len(new_tenders)}")
    
    for tender in new_tenders:
        try:
            analysis = analyzer.analyze_tender(tender)
            db.save_analysis(tender['tender_id'], analysis)
            logger.info(f"‚úÖ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {tender['tender_id']}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {tender['tender_id']}: {e}")

def generate_proposals():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"""
    logger.info("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")
    
    config = Config()
    db = Database(config.DB_PATH)
    generator = ProposalGenerator(config.COMPANY_DATA)
    
    analyzed_tenders = db.get_analyzed_tenders()
    
    for tender in analyzed_tenders:
        proposal = generator.generate(tender)
        db.save_proposal(tender['tender_id'], proposal)
        logger.info(f"‚úÖ –ö–ü —Å–æ–∑–¥–∞–Ω–æ: {tender['tender_id']}")

def check_statuses():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞—è–≤–æ–∫"""
    logger.info("üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞—è–≤–æ–∫")
    
    config = Config()
    db = Database(config.DB_PATH)
    parser = ZakupkiParser()
    telegram = TelegramNotifier(config.TELEGRAM_TOKEN, config.TELEGRAM_CHAT_ID)
    
    applications = db.get_active_applications()
    
    for app in applications:
        try:
            status = parser.check_status(app['url'])
            if status != app['status']:
                db.update_status(app['tender_id'], status)
                telegram.notify_status_change(app['tender_id'], app['status'], status)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python main.py [monitor|analyze|generate|check]")
        sys.exit(1)
    
    command = sys.argv[1]
    
    commands = {
        "monitor": monitor_tenders,
        "analyze": analyze_documents,
        "generate": generate_proposals,
        "check": check_statuses
    }
    
    if command in commands:
        commands[command]()
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
        sys.exit(1)
